@implements IDisposable
@inject IDialogService DialogService
@inject IMessageService MessageService
@inject IProductionResposity productionDB

@rendermode InteractiveServer

<FluentButton BackgroundColor="var(--neutral-layer-4)" OnClick="OpenNotificationTaskAsync" Title="Notification Task">

    @if (counter > 0)
    {
        <FluentCounterBadge Count="@counter"
        Max="20"
        ShowOverflow="true"
        BackgroundColor="@Color.Error"
        Color="Color.Fill"
        Appearance="Appearance.Accent"
        ShowZero=true>
            <ChildContent>
                @NotificationIcon()
            </ChildContent>
        </FluentCounterBadge>
    }
    else
    {
        @NotificationIcon()
    }
</FluentButton>

@code {
    private IDialogReference? _dialog;
   
    [Parameter]
    public UserInfo CurrentUser { get; set; } = new();

    IQueryable<ProductionTask>? items;

    protected override async Task OnInitializedAsync()
    {        
        items = (await productionDB.GetNotifyProductTasks(CurrentUser.EmplRefID)).AsQueryable();
        counter = items.Count();
             
    }
             

    int counter = 0;


    private RenderFragment NotificationIcon() =>
        @<FluentIcon Value="@(new Icons.Regular.Size20.Alert())" Color="Color.Neutral" Title="Notification center" />;

    private async Task OpenNotificationTaskAsync()
    {

        var contentView = new AssignTaskView();
        contentView.CurrentUser = CurrentUser!;

        DialogParameters<ProductionTask> parameters = new()
            {
                Title = $"New Tasks",
                Alignment = HorizontalAlignment.Right,
                Width ="600px",
                PrimaryAction = "Ok",
                SecondaryAction = "Cancel"
            };

        var dialog = await DialogService.ShowPanelAsync<NotificationTaskPanel>(contentView, parameters);
        var dialogResult = await dialog.Result;
        HandlePanel(dialogResult, contentView);

    }

    private static void HandlePanel(DialogResult result, AssignTaskView contentView)
    {
        if (result.Cancelled)
        {

            return;
        }

        if (result.Data is not null)
        {

            return;
        }
    }

    public void Dispose()
    {
        //MessageService.OnMessageItemsUpdated -= UpdateCount;
    }

}
