@using LabManagement.Components.Infrastructure.IRespository
@using LabManagement.Components.Pages.SystemPages
@using LabManagement.Models
@inherits LayoutComponentBase
@inject IDashboardResposity db
@inject IDialogService DialogService
@inject IMessageService MessageService

<FluentDesignTheme Mode="DesignThemeModes.Light" OfficeColor="OfficeColor.Booking" />

<FluentLayout>
    <FluentHeader Style="background-color:#FFFFFF;height:60px;padding:2px;">                     
        <img src="images/logo ztech.png" width="200" height="65" />
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.End">
            <FluentLabel Typo="Typography.H1">TODAY:</FluentLabel>
            <FluentLabel Typo="Typography.H1" Style="color:#31a36c">@reportPeriod.ToDate?.ToString("ddd MM/dd/yyyy")</FluentLabel>
            <FluentNavLink Icon="@(new Icons.Regular.Size24.ArrowCircleDown())" Href="/import">Import Data</FluentNavLink>

        </FluentStack>

    </FluentHeader>

    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">

        <FluentBodyContent Class="body-content">

            <div class="content">
                <FluentMenuProvider @rendermode="RenderMode.InteractiveServer" />
                <FluentMessageBarProvider Section="@App.MESSAGES_TOP" @rendermode="RenderMode.InteractiveServer" />
                @Body

            </div>
        </FluentBodyContent>
    </FluentStack>

</FluentLayout>


<FluentToastProvider @rendermode="RenderMode.InteractiveServer" />
<FluentDialogProvider @rendermode="RenderMode.InteractiveServer" />
<FluentTooltipProvider @rendermode="RenderMode.InteractiveServer" />
<FluentKeyCodeProvider @rendermode="RenderMode.InteractiveServer" />


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>


@code {

    //public DesignThemeModes Mode { get; set; }
    // public OfficeColor? officeColor { get; set; }

    private IDialogReference? _dialog;

    // [CascadingParameter]
    // private Task<AuthenticationState> authenticationStateTask { get; set; }

    // UserInfo? CurrentUser { get; set; } = new();
    private ReportPeriod reportPeriod = new();

    protected override async Task OnInitializedAsync()
    {
        //officeColor = OfficeColor.Yammer;
        MessageService.OnMessageItemsUpdated += UpdateCount;

        reportPeriod = await db.GetReportPeriod();

        // var authState = await authenticationStateTask;
        // var username = authState.User.Identity.Name;

        // CurrentUser = await userDB.GetUser(username);

         
    }


    private void UpdateCount()
    {
        InvokeAsync(StateHasChanged);
    }



    private RenderFragment NotificationIcon() =>
        @<FluentIcon Value="@(new Icons.Regular.Size20.Alert())" Color="Color.Neutral" Title="Notification center" />;
    
    private static void HandlePanel(DialogResult result)
    {
        if (result.Cancelled)
        {
           
            return;
        }

        if (result.Data is not null)
        {
           
            return;
        }
    }

    public void Dispose()
    {
        MessageService.OnMessageItemsUpdated -= UpdateCount;
    }

}


