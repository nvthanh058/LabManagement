@using LabManagement.Components.Pages.SystemPages
@using Microsoft.FluentUI.AspNetCore.Components.DesignTokens
@inherits LayoutComponentBase
@inject IUserInfoResposity userDB
@inject IDialogService DialogService
@inject IMessageService MessageService

<FluentDesignTheme Mode="DesignThemeModes.Light" OfficeColor="OfficeColor.Excel" />

<FluentLayout>

    <FluentHeader Style="height:64px;padding:2px;background-color:#fff">

        <AuthorizeView>
            <Authorized>
                <FluentStack Orientation="Orientation.Horizontal" Style="margin-left:2px;width:100%" VerticalAlignment="VerticalAlignment.Bottom" HorizontalAlignment="@HorizontalAlignment.Left" HorizontalGap="0">
                    <img src="images/Hogan.png" width="167" height="60" style="margin-left:2px;" />
                    @if (CurrentUser != null)
                        @if (CurrentUser.GroupID == "admin" || CurrentUser.GroupID == "vieworder" || CurrentUser.GroupID == "manager")
                        {
                            <HeaderLayout CurrentUser="@CurrentUser"></HeaderLayout>
                        }

                    </FluentStack>


            <FluentStack HorizontalAlignment="@HorizontalAlignment.End"
            VerticalAlignment="@VerticalAlignment.Center"
            Style="height: 48px; padding-inline-end: 10px; ">

                <NotificationTask CurrentUser="@CurrentUser"></NotificationTask>
                <NotificationMessage CurrentUser="@CurrentUser"></NotificationMessage>

                <UserProfile CurrentUser="@CurrentUser"></UserProfile>

            </FluentStack>

        </Authorized>

    </AuthorizeView>

</FluentHeader>
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <AuthorizeView>
             <Authorized>
                <NavMenu  CurrentUser="@CurrentUser"/>
            </Authorized> 

        </AuthorizeView>
        <FluentBodyContent Class="body-content">

            <div class="content">
                <FluentMenuProvider @rendermode="RenderMode.InteractiveServer" />
                <FluentMessageBarProvider Section="@App.MESSAGES_TOP" @rendermode="RenderMode.InteractiveServer" />
                @Body

            </div>
        </FluentBodyContent>
    </FluentStack>
    <FluentFooter>
        <a href="#" target="_blank">Copy Right Lab Management 2005</a>
        <FluentSpacer />
        <a href="#" target="_blank">ERP System for Labs</a>
    </FluentFooter>
</FluentLayout>


<FluentToastProvider @rendermode="RenderMode.InteractiveServer" />
<FluentDialogProvider @rendermode="RenderMode.InteractiveServer" />
<FluentTooltipProvider @rendermode="RenderMode.InteractiveServer" />
<FluentKeyCodeProvider @rendermode="RenderMode.InteractiveServer" />


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {

    [Inject]
    private BodyFont BodyFont { get; set; } = default!;
    
    //public DesignThemeModes Mode { get; set; }
   // public OfficeColor? officeColor { get; set; }

    private IDialogReference? _dialog;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    UserInfo? CurrentUser { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        //officeColor = OfficeColor.Yammer;
        MessageService.OnMessageItemsUpdated += UpdateCount;

        var authState = await authenticationStateTask;
        var username = authState.User.Identity.Name;

        CurrentUser = await userDB.GetUser(username);

         
    }


    private void UpdateCount()
    {
        InvokeAsync(StateHasChanged);
    }



    private RenderFragment NotificationIcon() =>
        @<FluentIcon Value="@(new Icons.Regular.Size20.Alert())" Color="Color.Neutral" Title="Notification center" />;
    
    private static void HandlePanel(DialogResult result)
    {
        if (result.Cancelled)
        {
           
            return;
        }

        if (result.Data is not null)
        {
           
            return;
        }
    }

    public void Dispose()
    {
        MessageService.OnMessageItemsUpdated -= UpdateCount;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BodyFont.WithDefault("Roboto");
            StateHasChanged();
        }
    }

}


