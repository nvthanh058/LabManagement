@implements IDialogContentComponent<CaseOrder>
@rendermode InteractiveServer
@inject IFileOrderResposity db
@inject IUserInfoResposity userdb
@inject IWebHostEnvironment _webHost;
@inject IDialogService DialogService
@inject IJSRuntime JS

<FluentStack Orientation="Orientation.Vertical" VerticalGap="10">
    
    <FluentDataGrid Items="@fileitems"
    style="height: 100%;width:100%"
    TGridItem="OrderFile"
    RowSize="DataGridRowSize.Medium"
    ResizableColumns=true>
        <TemplateColumn Title="" Align="@Align.Start" Width="70%">
            
           
                <FluentStack Orientation="Orientation.Horizontal">
                    <FluentIcon Value="@(new Icons.Regular.Size24.DocumentBulletList())" />
                    <nobr>
                        @context.FilePath
                    </nobr>
                </FluentStack>
               
           
        </TemplateColumn>


        <TemplateColumn Title="" Align="@Align.End" Width="30%">

            <FluentButton IconStart="@(new Icons.Regular.Size16.ArrowCircleDown())" OnClick="@(() => DownloadItem(context))" />
           
        </TemplateColumn>
        
    </FluentDataGrid>
</FluentStack>

@code {
    
    [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; }
    UserInfo? CurrentUser { get; set; } = new();

    IQueryable<OrderFile>? fileitems;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public CaseOrder Content { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateTask;
        var UserID = authState.User.Identity.Name;

        CurrentUser = await userdb.GetUser(UserID);

        await LoadFiles(Content.OrderID);

    }


    private async Task LoadFiles(string OrderID)
    {
        fileitems = (await db.GetFiles(OrderID, 1)).AsQueryable();
    }
    
    private async Task DownloadItem(OrderFile item)
    {
        var path = @"files/" + item.UserID + @"/" + item.UploadDate.ToString("yyyyMMdd") + "/";
        await JS.InvokeVoidAsync("urlFileDownload", item.FilePath, path + item.FilePath);
        await db.SaveDownloadStatus(item.OrderID, CurrentUser!.EmplRefID, item.RecID, 1);
    }


}
