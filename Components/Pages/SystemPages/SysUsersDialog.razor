@attribute [Authorize]
@implements IDialogContentComponent<UserInfo>

@inject IUserInfoResposity userDB
@inject IEmployeeResposity employeeDB
<!-- Header -->
<FluentDialogHeader ShowDismiss="true">

    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.PersonInfo())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<!-- Body -->
<FluentDialogBody>

    <FluentLabel Color="Color.Warning">@ErrorMessage</FluentLabel>

    <FluentAutocomplete Id="my-customized"
    @ref="EmployeeList"
    TOption="Employee"
    Width="100%"
    Disabled="@(Content.RecID>0?true:false)"
    Placeholder="search"
    OnOptionsSearch="@OnSearchAsync"
    MaximumSelectedOptions="1"
    AutoComplete="off"
    KeepOpen="true"
    OptionText="@(item => item.FullName)"
    OptionStyle="min-height: 40px;"
    @bind-SelectedOptions="@SelectedEmpl">

        <LabelTemplate>        
            Select a Employee
            <FluentIcon Value="@(new Icons.Regular.Size20.Person())" Style="margin: 0 4px;" />
        </LabelTemplate>

        @* Template used with each Selected items *@
        <SelectedOptionTemplate>
            <FluentPersona ImageSize="24px"
            Image="@context.GetPhotoUrl"
            Name="@($"{context.EmplID} {context.FullName}")"
            Style="height: 26px; background: var(--neutral-fill-secondary-hover)"
            DismissTitle="Remove"
            Status="PresenceStatus.Available"
            OnDismissClick="@(async () => await EmployeeList.RemoveSelectedItemAsync(context))">
            </FluentPersona>
        </SelectedOptionTemplate>

        @* Template used with each Option items *@
        <OptionTemplate>
            <FluentPersona ImageSize="32px"
            Image="@context.GetPhotoUrl"
            Status="PresenceStatus.Available"
            StatusSize="PresenceBadgeSize.Small"
            Name="@($"{context.EmplID} {context.FullName}")" />
        </OptionTemplate>

        @* Template used when the maximum number of selected items (MaximumSelectedOptions) has been reached *@
        <MaximumSelectedOptionsMessage>
            The maximum number of selected items has been reached.
        </MaximumSelectedOptionsMessage>

        @* Content display at the top of the Popup area *@
        <HeaderContent>
            <FluentLabel Color="Color.Accent"
            Style="padding: 8px; font-size: 11px; border-bottom: 1px solid var(--neutral-fill-stealth-hover);">
                Suggested contacts
            </FluentLabel>
        </HeaderContent>

        @* Content display at the bottom of the Popup area *@
        <FooterContent>
            @if (!context.Any())
            {
                <FluentLabel Style="font-size: 11px; text-align: center; width: 200px;">
                    No results found
                </FluentLabel>
            }
        </FooterContent>
    </FluentAutocomplete>


    <FluentTextField
    @bind-Value="@Content.UserID"
    Label="User ID"
    Required Disabled="@(Content.RecID>0?true:false)" />

    <FluentTextField @bind-Value="@Content.UserName" Label="User Name"
    Required Style="width:300px" />

    <FluentSelect Disabled="true" TOption="UserGroupInfo"
    Label="Group"
    Placeholder="Select a group"
    Items="@groupitems"
    Width="200px"
    Height="250px"
    OptionValue="@(i => i.GroupID)"
    OptionText="@(i => i.GroupName)"
    @bind-Value="@Content.GroupID"
    @bind-SelectedOption=@selectedGroup>

    </FluentSelect>


</FluentDialogBody>

<!-- Footer -->
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent"
    OnClick="@SaveAsync" IconStart="@(new Icons.Regular.Size24.Save())">Save</FluentButton>

    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync" IconStart="@(new Icons.Regular.Size24.ArrowEnterLeft())"> Cancel</FluentButton>
</FluentDialogFooter>

@code {
    string ErrorMessage = "";
    IQueryable<UserGroupInfo>? groupitems;

    UserGroupInfo selectedGroup = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public UserInfo Content { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {

        groupitems = (await userDB.GetAllGroup("", "")).AsQueryable();

        selectedGroup = new UserGroupInfo();
        selectedGroup.GroupID = Content.GroupID;
    }

    private async Task SaveAsync()
    {
        if(Content.RecID==0)
        {
            if (SelectedEmpl.ToList().Count == 0)
            {

                ErrorMessage = "You should select a empoyee";
                return;
            }
        }

        if(Content.UserID.Trim().Equals(""))
        {
            ErrorMessage = "You should input User ID";
            return;
        }

        var user = new UserInfo();

        if(Content.UserName.Equals(""))
        {
            Content.UserName = SelectedEmpl.FirstOrDefault().FullName;
        }

        user.RecID = Content.RecID;
        user.EmplRefID = SelectedEmpl.FirstOrDefault().EmplRefID;
        user.UserID = Content.UserID;
        user.UserName = Content.UserName;
        user.GroupID = selectedGroup.GroupID;

        var res = await userDB.SaveUser(user);
        if(res>0){
            await Dialog.CloseAsync(Content);
        }

    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }


    FluentAutocomplete<Employee> EmployeeList = default!;
    IEnumerable<Employee> SelectedEmpl = Array.Empty<Employee>();

    

    private async Task OnSearchAsync(OptionsSearchEventArgs<Employee> e)
    {
        var items = (await employeeDB.GetAll("", "")).AsQueryable();
        e.Items = items.Where(i => i.FullName.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase))
                             .OrderBy(i => i.FullName);
    }


}
