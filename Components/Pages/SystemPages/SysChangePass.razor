@implements IDialogContentComponent<ChangePassModel>
@inject IUserInfoResposity userDB
@attribute [Authorize]

<!-- Header -->
<FluentDialogHeader ShowDismiss="true">

    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.Key())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<!-- Body -->
<FluentDialogBody>

    <FluentStack VerticalAlignment="VerticalAlignment.Top" HorizontalAlignment="HorizontalAlignment.Center" Width="100%">

        <FluentStack Orientation="Orientation.Vertical" Style="width:250px" VerticalGap="10">

            <FluentLabel Typo="Typography.H5" Color="Color.Warning">@ErrorMessage</FluentLabel>

            <FluentTextField @bind-Value="Content.CurrentUser.UserID" 
            Style="width:200px" AriaLabel="User ID" Placeholder="User Name" Disabled="true"></FluentTextField>           

            <FluentTextField  @bind-Value="@Content.OldPassword" Style="width:250px" TextFieldType="TextFieldType.Password" Placeholder="Old Password"></FluentTextField>           
            <FluentTextField @bind-Value="@Content.NewPassword" Style="width:250px" TextFieldType="TextFieldType.Password" Placeholder="New Password"></FluentTextField>
            <FluentTextField @bind-Value="@Content.ConfirmPassword" Style="width:250px" TextFieldType="TextFieldType.Password" Placeholder="Confirm Password"></FluentTextField>

        </FluentStack>

    </FluentStack>

</FluentDialogBody>


<!-- Footer -->

<FluentDialogFooter>
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentButton Appearance="Appearance.Accent"
        OnClick="@SaveAsync" IconStart="@(new Icons.Regular.Size24.Save())">Save</FluentButton>

        <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync" IconStart="@(new Icons.Regular.Size24.ArrowEnterLeft())"> Cancel</FluentButton>
    </FluentStack>
</FluentDialogFooter>

@code {


    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public ChangePassModel Content { get; set; } = new();
    string? ErrorMessage="";

    private async Task SaveAsync()
    {
        var pass = Helpers.Helper.EncodePassword(Content.OldPassword);

        if(pass != Content.CurrentUser.Password)
        {
            ErrorMessage = "Old password does not match";
            return;
        }
        if (Content.NewPassword =="")
        {
            ErrorMessage = "You should input New Password";
            return;
        }
        if (Content.NewPassword !=Content.ConfirmPassword)
        {
            ErrorMessage = "New Password does not match";
            return;
        }
        var newPass = Helpers.Helper.EncodePassword(Content.NewPassword);

        var res = await userDB.UpdateUserPassword(Content.CurrentUser.UserID, newPass);
        if(res >0 )
        {
            ErrorMessage = "Your password have been updated";
        }
    }
    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

}
