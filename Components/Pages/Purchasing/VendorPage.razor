@page "/vendors"
@attribute [Authorize]
@using LabManagement.Components.Pages.CommonForms.Panels
@using LabManagement.Models.PurchasingModels
@rendermode InteractiveServer
@inject IDialogService DialogService
@inject IPurchasingResposity db
@inject IJSRuntime JSRuntime
@inject IMessageService MessageService
@inject IUserInfoResposity userdb

<FluentMenuProvider @rendermode="RenderMode.InteractiveServer" />

@if (ShowList == true)
{

    <FluentStack Orientation="Orientation.Vertical" Width="100%">

        <FluentStack VerticalAlignment="VerticalAlignment.Center" Width="100%">

            <FluentButton IconStart="@(new Icons.Regular.Size24.AddSquare())" OnClick="@AddAsync">New</FluentButton>
            <FluentButton IconStart="@(new Icons.Regular.Size24.ArrowSquareDown())">Import</FluentButton>
            <FluentButton IconStart="@(new Icons.Regular.Size24.TableArrowUp())">Export</FluentButton>            
            <FluentSearch @bind-Value=Search Style="width:200px" @bind-Value:after=LoadData></FluentSearch>

        </FluentStack>

        @if (items == null)
        {
            <FluentProgressRing></FluentProgressRing>
        }
        else
        {
            <FluentDataGrid Items="@items"
            TGridItem="Vendor"
            ResizableColumns=true
            Style="font-size:10pt;"
            ShowHover="true"        
            RowSize="DataGridRowSize.Medium"
            Pagination="@pagination">
                <SelectColumn TGridItem="Vendor"
                SelectMode="@Mode"
                SelectFromEntireRow="@SelectFromEntireRow"
                Property="@(e => e.Selected)"
                OnSelect="@(e => e.Item.Selected = e.Selected)">
                </SelectColumn>

                <PropertyColumn Width="120px" Property="@(p => p.VendorID)" Sortable="true" />
                <PropertyColumn Width="250px" Property="@(c => c.VendorName)" Sortable="true">
                   
                </PropertyColumn>
                
                <PropertyColumn Title="Email" Property="@(p => p.Email)" Sortable="true" />
                <PropertyColumn Title="MobilePhone" Property="@(p => p.MobilePhone)"  Sortable="true" />
                <PropertyColumn Title="Tel" Property="@(p => p.Tel)" Sortable="true" />
                <TemplateColumn Title="Actions" Align="@Align.End">

                    <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => EditAsync(context))" />
                    <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeleteAsync(context))" />
                </TemplateColumn>

            </FluentDataGrid>

            <FluentPaginator State="@pagination" />
        }


    </FluentStack>

}

else{
    <div style="margin-left:20px;width:600px;">
        <h5>Vendor Information</h5>
        <FluentStack Orientation="Orientation.Vertical" VerticalGap="20">
            <FluentStack VerticalAlignment="VerticalAlignment.Center" Width="100%">
                <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.Save())" OnClick="@SaveAsync">Save</FluentButton>
                <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
                
            </FluentStack>
            <FluentStack Orientation="Orientation.Horizontal">

                <FluentStack Orientation="Orientation.Vertical">
                    <FluentTextField Label="Vendor Code" @bind-Value="@Content.VendorID" ReadOnly="@((Content.RecID>0)?true:false)" />
                    <FluentTextField Label="Vendor Name" @bind-Value="@Content.VendorName" Style="width:250px" />
                    <FluentTextField Label="Email" @bind-Value="@Content.Email" Style="width:250px" />
                    
                </FluentStack>

                <FluentStack Orientation="Orientation.Vertical">
                                      
                    <FluentTextField Label="MobilePhone" @bind-Value="@Content.MobilePhone" />
                    <FluentTextField Label="Address" @bind-Value="@Content.Address"></FluentTextField>
                    <FluentTextField Label="Tel" @bind-Value="@Content.Tel"></FluentTextField>
                    
                </FluentStack>
            </FluentStack>

          

        </FluentStack>
    </div>
}



@code {
    bool ShowList = true;
    private IQueryable<Vendor>? items;
    string Search = "";


    bool SelectFromEntireRow = true;
    DataGridSelectMode Mode = DataGridSelectMode.Single;

    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };

    public Vendor Content { get; set; } = default!;
      [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; }

    UserInfo? CurrentUser { get; set; } = new();
    string nameFilter = string.Empty;
   
    protected override async Task OnInitializedAsync()
    {                     
        var authState = await authStateTask;
        var UserID = authState.User.Identity.Name;

        CurrentUser = await userdb.GetUser(UserID);

        await LoadData();       
    }
    private async Task LoadData()
    {        
       
        items = (await db.GetVendors("", Search)).AsQueryable();
      
    }
 
  

    private async Task CancelAsync()
    {
        ShowList = true;
    }
    private async Task AddAsync()
    {
        Content = new Vendor();
        Content.UserID = CurrentUser.UserID;
        
        ShowList = false;
    }
    private async Task SaveAsync()
    {
        await Task.Delay(500);
        
        await db.SaveVendor(Content);
       
        ShowList = true;
        LoadData();
    }


    private async Task EditAsync(Vendor item)
    {
        Content = item;
        ShowList = false;

    }


    private async Task DeleteAsync(Vendor item)
    {        
        if (item is null)
        {
            return;
        }

        var dialogParameters = new DialogParameters
            {
                Title = "Delete Vendor",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true
            };

        // var dialog = await dialogService.ShowDialogAsync<ConfirmationPanel>(dialogParameters);
        var dialog = await DialogService.ShowConfirmationAsync(
            "Are you sure you want to delete this Vendor?",
            "Yes",
            "No",
            "Delete Vendor?");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            //var res = await context.DeleteCustomer(item.UserID);            
            await LoadData();
        }

    }
   

  
}
