@page "/employee"
@attribute [Authorize]
@using LabManagement.Components.Pages.CommonForms.Panels

@rendermode InteractiveServer
@inject IDialogService DialogService
@inject IEmployeeResposity context
@inject ExportService exportService
@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment _webHost;

<FluentMenuProvider @rendermode="RenderMode.InteractiveServer" />

@if(ShowList==true)
{

    <div style="height: 100%; overflow:auto;" tabindex="-1">

    <FluentStack Orientation="Orientation.Vertical" Width="100%">

        <FluentStack VerticalAlignment="VerticalAlignment.Center" Width="100%">

            <FluentButton IconStart="@(new Icons.Regular.Size24.AddSquare())" OnClick="@AddAsync">New</FluentButton>
            <FluentButton IconStart="@(new Icons.Regular.Size24.ArrowSquareDown())">Import</FluentButton>
            <FluentButton IconStart="@(new Icons.Regular.Size24.TableArrowUp())">Export</FluentButton>
            <FluentButton IconStart="@(new Icons.Regular.Size24.Print())">Print</FluentButton>
            <FluentSearch @bind-Value=Search Style="width:200px" @bind-Value:after=LoadData></FluentSearch>
        </FluentStack>

        @if (items == null)
        {
            <div style="width:200px;height:200px;margin-top:100px;margin-left:100px;">
                <FluentProgressRing></FluentProgressRing>
            </div>
        }
        else
        {
            
                <FluentDataGrid Items="@FilteredItems"
                TGridItem="Employee"
                ResizableColumns=true
                ShowHover="true"
                Style="font-size:10pt;"
                HeaderCellAsButtonWithMenu="true"
                                RowSize="DataGridRowSize.Medium"
                Pagination="@pagination">

                    <SelectColumn TGridItem="Employee"
                    SelectMode="@Mode"
                    SelectFromEntireRow="@SelectFromEntireRow"
                    Property="@(e => e.Selected)"
                    OnSelect="@(e => e.Item.Selected = e.Selected)">
                    </SelectColumn>

                    <TemplateColumn Tooltip="true" Title="" Align="Align.Center" Width="40px">

                        <FluentPersona Name=""
                        StatusSize="PresenceBadgeSize.Small"
                        StatusTitle=""
                        Image="@context.GetPhotoUrl"
                        ImageSize="32px"></FluentPersona>

                    </TemplateColumn>

                    <PropertyColumn Width="80px" Property="@(p => p.EmplID)" InitialSortDirection=SortDirection.Ascending  Sortable="true" />

                    <PropertyColumn Width="250px" Property="@(c => c.FullName)"  Sortable="true" Comparer="@StringLengthComparer.Instance" Filtered="!string.IsNullOrWhiteSpace(nameFilter)">
                        <ColumnOptions>
                            <div class="search-box">
                                <FluentSearch type="search" Autofocus=true @bind-Value=nameFilter @oninput="HandleUserNameFilter" AfterBindValue="HandleClear" Placeholder="employee name..." />
                            </div>
                        </ColumnOptions>
                    </PropertyColumn>

                    <PropertyColumn Width="120px" Property="@(p => p.Position)" Sortable="true" />
                    <PropertyColumn Width="120px" Property="@(p => p.DeptName)" Sortable="true" />
                    <PropertyColumn Width="120px" Title="Started Date" Property="@(p => p.StartedDate)" Format="dd/MM/yyyy" Sortable="true" />
                    <PropertyColumn Width="120px" Title="Date Of Birth" Property="@(p => p.DOB)" Format="dd/MM/yyyy" Sortable="true" />
                    <PropertyColumn Width="120px" Property="@(p => p.PlaceOfBirth)" Sortable="true" />
                    <PropertyColumn Width="120px" Property="@(p => p.NativeCountry)" Sortable="true" />
                    <TemplateColumn Title="Actions" Align="@Align.End">
                        <FluentButton IconStart="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => EditAsync(context))" />                    
                        <FluentButton IconStart="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeleteAsync(context))" />                    
                    </TemplateColumn>

                </FluentDataGrid>


           
            <FluentPaginator State="@pagination" />
        }
    </FluentStack>
    </div>
}
else{
    <div style="margin-left:20px;width:600px;">
        <FluentStack VerticalAlignment="VerticalAlignment.Center" HorizontalAlignment="HorizontalAlignment.End" Width="100%">
            <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.Save())" OnClick="@SaveAsync">Save</FluentButton>
            <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
        </FluentStack>
        <FluentStack Orientation="Orientation.Vertical" VerticalGap="20">

            <FluentStack VerticalAlignment="VerticalAlignment.Center">
                <FluentPersona Name="@Content.FullName"
                StatusSize="PresenceBadgeSize.Small"
                StatusTitle="He is available"
                Image="@Content.GetPhotoUrl"
                ImageSize="100px"></FluentPersona>
                <FluentInputFile Id="my-file-uploader"
                Mode="InputFileMode.SaveToTemporaryFolder"
                Multiple="true"
                MaximumFileCount="1"
                MaximumFileSize="@(10*1024*1024)"
                Accept="image/*"
                @bind-ProgressPercent="@ProgressPercent"
                OnCompleted="@OnCompletedAsync"
                Style="height: 30px;width:50px">
                    <ChildContent>
                        <label for="my-file-uploader">
                            <FluentIcon Value="@(new @Icons.Regular.Size24.ArrowUpload())" />
                        </label>

                    </ChildContent>
                </FluentInputFile>
            </FluentStack>

            <FluentTabs @bind-ActiveTabId="@activeid">
                <FluentTab Id="tab-1">
                    <Header>
                        <FluentStack Orientation="Orientation.Horizontal">
                            <FluentIcon Value="@(new Icons.Regular.Size20.Album())" />
                            <FluentLabel Typo="Typography.H6">General</FluentLabel>
                        </FluentStack>
                        
                       
                    </Header>
                   
                    <Content>
                        <FluentStack Orientation="Orientation.Horizontal">

                            <FluentStack Orientation="Orientation.Vertical">
                                <FluentTextField Label="Empl ID" @bind-Value="@Content.EmplID" />
                                <FluentTextField Label="Full Name" @bind-Value="@Content.FullName" />
                                <FluentTextField Label="Title" @bind-Value="@Content.Position" Style="width:250px" />

                                <FluentSelect TOption="Department"
                                Label="Department"
                                Placeholder="Select a Department"
                                Items="@departmentItems"
                                Width="200px"
                                Height="250px"
                                OptionValue="@(i => i.DeptID)"
                                OptionText="@(i => i.DeptName)"
                                @bind-Value="@Content.DeptID">

                                </FluentSelect>
                                <FluentDatePicker Label="Started Date" @bind-Value="@Content.StartedDate"></FluentDatePicker>

                            </FluentStack>

                            <FluentStack Orientation="Orientation.Vertical">


                                <FluentSelect Label="Gender" @bind-Value="@Content.Gender" TOption="string">
                                    <FluentOption Value="F">
                                        Female
                                        <FluentIcon Value="@(new Icons.Regular.Size16.Person())" Color="@Color.Neutral" Slot="start" />
                                    </FluentOption>
                                    <FluentOption Value="M" Selected="true">
                                        Male
                                        <FluentIcon Value="@(new Icons.Regular.Size16.Person())" Color="@Color.Neutral" Slot="start" />
                                    </FluentOption>

                                </FluentSelect>

                                <FluentDatePicker Label="Date of Birth" @bind-Value="@Content.DOB"></FluentDatePicker>
                                <FluentTextField Label="Place Of Birth" @bind-Value="@Content.PlaceOfBirth" />
                                <FluentTextField Label="Native Country" @bind-Value="@Content.NativeCountry" />
                                <FluentTextField Label="National Region" @bind-Value="@Content.NationalRegion" />

                            </FluentStack>
                        </FluentStack>

                    </Content>

                </FluentTab>
                <FluentTab Id="tab-2">
                    <Header>
                        <FluentStack Orientation="Orientation.Horizontal">
                            <FluentIcon Value="@(new Icons.Regular.Size20.ContactCard())" />
                            <FluentLabel Typo="Typography.H6">Contacts</FluentLabel>
                        </FluentStack>
                    </Header>
                    <Content>

                        <FluentStack Orientation="Orientation.Horizontal">

                            <FluentStack Orientation="Orientation.Vertical">
                                <FluentTextField Label="Passport No" @bind-Value="@Content.PassportNo" />
                                <FluentTextField Label="Issued Place" @bind-Value="@Content.IssuedPlace" />
                                <FluentDatePicker Label="Issued Date" @bind-Value="@Content.IssuedDate" />
                                <FluentTextField Label="Permanent Address" @bind-Value="@Content.PermanentAddress" Style="width:250px" />
                                <FluentTextField Label="Temporary Address" @bind-Value="@Content.TemporaryAddress" Style="width:250px" />
                            </FluentStack>

                            <FluentStack Orientation="Orientation.Vertical">

                                <FluentTextField Label="Education" @bind-Value="@Content.Education" Style="width:250px" />
                                <FluentNumberField Label="Working Day Week" @bind-Value="@Content.WorkingDayWeek" Min="1" Max="7" Style="width:80px" />
                                <FluentNumberField Label="Total Hours Period" @bind-Value="@Content.TotalHoursPeriod" Style="width:80px" />

                            </FluentStack>
                        </FluentStack>


                    </Content>

                </FluentTab>
            </FluentTabs>

           

        </FluentStack>



    </div>

}

@code {

    string? activeid = "tab-1";
    FluentTab? changedto;
    private void HandleOnTabChange(FluentTab tab)
    {
        changedto = tab;
    }

    bool ShowList = true;

    IQueryable<Employee>? items;
    IQueryable<Department>? departmentItems;

    string Search = "";

    bool SelectFromEntireRow = true;
    DataGridSelectMode Mode = DataGridSelectMode.Single;

    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };


    int ProgressPercent = 0;
    FluentInputFileEventArgs[] Files = Array.Empty<FluentInputFileEventArgs>();

    private async Task OnCompletedAsync(IEnumerable<FluentInputFileEventArgs> files)
    {
        Files = files.ToArray();

        // For the demo, delete these files.
        foreach (var file in Files)
        {

            string uniqueFileName = null;


            string uploadsFolder = Path.Combine(_webHost.WebRootPath, "images");
            uniqueFileName = Guid.NewGuid().ToString() + "_" + Path.GetExtension(file.Name);
            string filePath = Path.Combine(uploadsFolder, uniqueFileName);

            // using (var fileStream = new FileStream(filePath, FileMode.Create))
            // {
            file.LocalFile?.CopyTo(filePath);
            //}

            Content.PhotoUrl = uniqueFileName;

            file.LocalFile?.Delete();
        }


        // Wait 3 seconds before to reset the progress bar.
        await Task.Delay(3000);
        ProgressPercent = 0;
    }


    [Parameter]
    public Employee Content { get; set; } = default!;




    string nameFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        LoadData();
    }
    private async void LoadData()
    {
        departmentItems = (await context.GetAllDepartment("", "")).AsQueryable();
        items = (await context.GetAll("", Search)).AsQueryable();
    }

    IQueryable<Employee>? FilteredItems => items?.Where(x => x.FullName.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));

    private void HandleUserNameFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }
    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
        {
            nameFilter = string.Empty;
        }
    }

    private async Task CancelAsync()
    {       
        ShowList = true;
    }
    private async Task AddAsync()
    {
        Content = new Employee();                      
        ShowList = false;
    }
    private async Task SaveAsync()
    {
        await Task.Delay(500);
        if (Content.RecID != 0)
        {            
            await context.Update(Content);
        }
        else
        {
            await context.Add(Content);
        }
        ShowList = true;
        LoadData();
    }

   
    private async Task EditAsync(Employee item)
    {       
        Content = item;
        ShowList = false;

    } 
      
 
    private async Task DeleteAsync(Employee item)
    {
      
        if (item is null)
        {
            return;
        }

        var dialogParameters = new DialogParameters
            {
                Title = "Delete Employee",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true
            };

        // var dialog = await dialogService.ShowDialogAsync<ConfirmationPanel>(dialogParameters);
        var dialog = await DialogService.ShowConfirmationAsync(
            "Are you sure you want to delete this Employee?",
            "Yes",
            "No",
            "Delete Employee?");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var res = await context.Delete(item.RecID);
            LoadData();
        }

    }

    public class StringLengthComparer : IComparer<string>
    {
        public static readonly StringLengthComparer Instance = new StringLengthComparer();

        public int Compare(string? x, string? y)
        {
            if (x is null)
            {
                return y is null ? 0 : -1;
            }

            if (y is null)
            {
                return 1;
            }

            return x.Length.CompareTo(y.Length);
        }
    }

    

}

