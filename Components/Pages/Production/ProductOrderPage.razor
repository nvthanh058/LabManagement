@page "/ProductOrder"
@attribute [Authorize]
@using LabManagement.Components.Pages.AccountReceivable.Panels
@using LabManagement.Components.Pages.Production.Panels
@using LabManagement.Components.Pages.CommonForms.Panels
@rendermode InteractiveServer
@inject IDialogService DialogService
@inject ISalesOrderResposity context
@inject IProductionResposity productionDB
@inject IJSRuntime JSRuntime
@inject IUserInfoResposity userDB
@inject IToastService ToastService
@inject IMessageService MessageService

<FluentMenuProvider @rendermode="RenderMode.InteractiveServer" />


<FluentSplitter Style="height:100%" Orientation="Orientation.Horizontal" BarSize="6" Panel1Size="70%" Panel2Size="auto">
    <Panel1>

        @if (ShowList == true)
        {
            <FluentStack Orientation="Orientation.Vertical" Width="100%">

                <FluentStack VerticalAlignment="VerticalAlignment.Center" Width="100%">

                    <FluentButton IconStart="@(new Icons.Regular.Size20.TableArrowUp())">Export</FluentButton>
                    <FluentButton IconStart="@(new Icons.Regular.Size20.Print())" OnClick="@PrintWorkOrder">Print WorkOrder</FluentButton>
                    <FluentButton IconStart="@(new Icons.Regular.Size20.TaskListAdd())" OnClick="@SelectTask">Assign</FluentButton>
                    <FluentButton IconStart="@(new Icons.Regular.Size20.AirplaneTakeOff())" OnClick="@PakShipTask">PakShip</FluentButton>
                    <FluentButton IconStart="@(new Icons.Regular.Size20.Info())" OnClick="@ShowSalesInfo">Sales Order</FluentButton>
                    <FluentSearch AutoComplete="off" @bind-Value=Search Style="width:200px" @bind-Value:after=LoadData></FluentSearch>

                </FluentStack>

                @if (items == null)
                {
                    <div style="width:200px;height:200px;margin-top:100px;margin-left:100px;">
                        <FluentProgressRing></FluentProgressRing>
                    </div>
                }
                else
                {
                    <FluentDataGrid Items="@items"
                    TGridItem="ProdTable"
                    ResizableColumns=true
                    ShowHover="true"
                                    RowSize="DataGridRowSize.Medium"
                    Pagination="@pagination">
                        <SelectColumn TGridItem="ProdTable" 
                        SelectMode="@Mode"
                        SelectFromEntireRow="@SelectFromEntireRow"
                        Property="@(e => e.Selected)"
                        SelectAll="@(items.All(e => e.Selected))"
                        SelectAllChanged="@(all => items.ToList().ForEach(p => p.Selected = (all == true)))"
                        OnSelect="@((e) =>OnSelectProduct(e.Item,e.Selected))">
                        </SelectColumn>

                        <PropertyColumn Width="120px" Property="@(p => p.CaseNo)" Sortable="true" />
                        <PropertyColumn Title="Code" Width="120px" Property="@(p => p.ItemCode)" Sortable="true" />
                        <PropertyColumn Title="Item Name" Width="120px" Property="@(p => p.ItemName)" Sortable="true" />
                        <PropertyColumn Width="150px" Property="@(p => p.PatientName)" Sortable="true" />
                        <PropertyColumn Width="120px" Property="@(p => p.TransDate)" Format="MM/dd/yyyy" Sortable="true" />
                        <PropertyColumn Title="Us Teeth" Property="@(p => p.UsTeeth)" Sortable="true" />
                        <PropertyColumn Title="Eur Teeth" Property="@(p => p.EurTeeth)" Sortable="true" />
                        <PropertyColumn Title="Shade" Property="@(p => p.Shade)" Sortable="true" />
                        <PropertyColumn Title="Quantity" Property="@(p => p.Quantity)" Sortable="true" />

                        <TemplateColumn Title="Actions" Align="@Align.End">
                            <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => EditAsync(context))" />
                            <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeleteAsync(context))" />



                        </TemplateColumn>

                    </FluentDataGrid>

                    <FluentPaginator State="@pagination" />
                }


            </FluentStack>

        }

        else
        {

            <FluentButton Appearance="Appearance.Outline" OnClick="@CancelAsync">Back To List</FluentButton>

            <ProductOrderPanel Content="@Content"></ProductOrderPanel>

        }
    </Panel1>
    <Panel2>


        <FluentTabs @bind-ActiveTabId="@activeid">
            <FluentTab Id="tab-1">
                <Header>

                    <FluentStack Orientation="Orientation.Horizontal">
                        <FluentIcon Value="@(new Icons.Regular.Size20.Album())" />
                        <FluentLabel Typo="Typography.H6">Tasks</FluentLabel>
                    </FluentStack>

                </Header>

                <Content>
                    <div id="printView">


                        <FluentDataGrid Items="@taskitems"
                        TGridItem="ProductionTask"
                                        RowSize="DataGridRowSize.Medium">
                            
                            <TemplateColumn Title="" Width="40px">
                                @if (context.ProdStatus == 0 && context.EmplRefID!="")
                                {
                                    <FluentIcon Value="@(new Icons.Regular.Size20.AccessibilityCheckmark())" />
                                }
                                @if (context.ProdStatus == 1)
                                {
                                    <FluentProgressRing Width="16px"></FluentProgressRing>
                                }
                                @if (context.ProdStatus == 2)
                                {
                                    <FluentIcon Value="@(new Icons.Regular.Size20.Checkmark())" />
                                }
                                @if (context.ProdStatus == 3)
                                {
                                    <FluentIcon Value="@(new Icons.Regular.Size20.CalendarCancel())" />
                                }
                            </TemplateColumn>
                            
                            <TemplateColumn Title="" Width="46px">
                                @if(context.EmplRefID!=""){
                                    <FluentPersona Status="PresenceStatus.Available"
                                                   StatusSize="PresenceBadgeSize.Small"
                                                   StatusTitle=""
                                                   Image="@context.GetPhotoUrl"
                                                   ImageSize="32px">
                                    </FluentPersona>
                                }
                               
                            </TemplateColumn> 

                            <PropertyColumn Title="Tech" Width="200px" Property="@(p => p.DisplayName)" Sortable="true" />
                            <PropertyColumn Title="Line" Width="100px" Property="@(p => p.LineName)" Sortable="true" />
                            <PropertyColumn Title="Start Time" Width="150px" Property="@(p => p.CreatedDateTime)" Format="MM/dd/yy HH:mm" Sortable="true" />
                            @*  <TemplateColumn Title="Actions" Align="@Align.End">
                            <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => EditTask(context))" />
                            <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeleteTask(context))" />
                        </TemplateColumn> *@

                        </FluentDataGrid>

                    </div>
                </Content>

            </FluentTab>
        </FluentTabs>

    </Panel2>
</FluentSplitter>


@code {

    string? activeid = "tab-1";

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    UserInfo? CurrentUser { get; set; } = new();

    bool ShowList = true;
    IQueryable<ProdTable>? items;
    IQueryable<ProductionTask>? taskitems;
    string Search = "";

    bool SelectFromEntireRow = true;
    DataGridSelectMode Mode = DataGridSelectMode.Multiple;

    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };

    public ProdTable Content { get; set; } = default!;
    public Employee SelectedEmployee { get; set; } = default!;

    string nameFilter = string.Empty;
    

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        var authState = await authenticationStateTask;
        var userName = authState.User.Identity.Name;

        CurrentUser = await userDB.GetUser(userName);

        LoadData();
    }

    private async Task OnSelectProduct(ProdTable item, bool Selected)
    {


        if(item!=null){
            item.Selected = Selected;
            await  LoadTask(item.INVENTTRANSID);
        }

        var msg =item.ItemName;
    }
    private async void LoadData()
    {
        items = (await context.GetProdOrders(0, "", DateTime.Now.ToString("yyyy-MM-dd"), DateTime.Now.ToString("yyyy-MM-dd"))).AsQueryable();
    }
    private async Task LoadTask(string TaskRefID)
    {
        taskitems = (await productionDB.GetProductTasks(0, TaskRefID,"","","")).AsQueryable();
    }

    private async Task EditTask(ProductionTask item)
    {

    }
    private async Task DeleteTask(ProductionTask item)
    {

    }

    private async Task CancelAsync()
    {
        ShowList = true;
    }

    private async Task EditAsync(ProdTable item)
    {
        Content = item;       
        ShowList = false;

    }

    private async Task SaveProductionAsync()
    {
        ProdTable item = Content as ProdTable;

        await context.UpdateProdOrder(item);
        ToastService.ShowSuccess("Save Order Success");
    }


    private async Task DeleteAsync(ProdTable item)
    {
        if (item is null)
        {
            return;
        }

        var dialogParameters = new DialogParameters
            {
                Title = "Delete Order",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true
            };

        // var dialog = await dialogService.ShowDialogAsync<ConfirmationPanel>(dialogParameters);
        var dialog = await DialogService.ShowConfirmationAsync(
            "Are you sure you want to delete this Order?",
            "Yes",
            "No",
            "Delete Order?");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var res = await context.DeleteProdOrder(item.RecID);
            LoadData();
        }

    }



    private async Task ShowSalesInfo()
    {
        ProdTable prodTable = items.Where(p => p.Selected).FirstOrDefault();

        if (prodTable != null)
        {
            var item = await context.GetOrderBySalesID(prodTable.SalesID);

            item.ShowImages=false;
            item.ShowFiles = false;
            item.ReadOnly = true;

            var parameters = new DialogParameters
                {
                    Title = "",
                    PrimaryAction = "Yes",
                    PrimaryActionEnabled = true,
                    Width = "90%",
                    Height = "90%",
                    Modal = true,

                };

            var dialog = await DialogService.ShowDialogAsync<SalesOrderInputPanel>(item, parameters);
            var dialogResult = await dialog.Result;

        }
        else
        {
            var dialog = await DialogService.ShowInfoAsync("You should select a product to assign");
        }

    }

    private async Task SelectTask()
    {
        ProdTable prodTable = items.Where(p => p.Selected).FirstOrDefault();

        if (prodTable != null)
        {

            var item = new ProductionTask();
            item.TaskRefID = prodTable.INVENTTRANSID;
            item.UserRefID = CurrentUser.EmplRefID;

            var parameters = new DialogParameters
                {
                    Title = "Select Technician for Case " + prodTable.CaseNo,
                    PrimaryAction = "Yes",
                    PrimaryActionEnabled = true,
                    Width = "600px",
                    Height = "500px",
                    Modal = false,
                };

            var dialog = await DialogService.ShowDialogAsync<AssignProductPanel>(item, parameters);
            var dialogResult = await dialog.Result;
            await SelectTaskResult(dialogResult);
        }
        else
        {
            var dialog = await DialogService.ShowInfoAsync("You should select a product to assign");
        }

    }
    private async Task SelectTaskResult(DialogResult result)
    {
        await Task.Delay(500);
        if (result.Cancelled)
        {
            return;
        }

        if (result.Data is not null)
        {
            var taskView = result.Data as ProductionTask;

            var res = await productionDB.SaveAssignProductTask(taskView);

        }
    }

    private async Task PakShipTask()
    {
        var selectedItems = items.Where(p => p.Selected).ToList();

        if (selectedItems.Count>0)
        {
            var pakshipLine = (await productionDB.GetAllProdLine(0, "", "PAKSHIP")).AsQueryable().FirstOrDefault();

            if(pakshipLine!=null){
                var dialog = await DialogService.ShowConfirmationAsync(
           "Are you sure you want to PAKSHIP selected orders?",
           "Yes",
           "No",
           "Pakship Order?");

                var result = await dialog.Result;
                if (!result.Cancelled)
                {
                    foreach (var prod in selectedItems)
                    {
                        var item = new ProductionTask();
                        item.TaskRefID = prod.INVENTTRANSID;
                        item.UserRefID = CurrentUser.EmplRefID;
                        item.LineID = pakshipLine.LineID;
                        
                        var res = await productionDB.SaveAssignProductTask(item);

                    }
                    await DialogService.ShowSuccessAsync("All orders Shipped");
                }
            }
                      
        }
        else
        {
            var dialog = await DialogService.ShowInfoAsync("You should select a product to Pakship");
        }

    }
   

    
   
    
    private async Task PrintWorkOrder()
    {
        await JSRuntime.InvokeVoidAsync("printComponent", "#printView");
    }
}
