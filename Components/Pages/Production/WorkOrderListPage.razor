@page "/WorkOrderList"
@using ClosedXML.Excel
@using LabManagement.Models.ProductionModels
@attribute [Authorize]
@rendermode InteractiveServer
@inject IMessageService MessageService
@inject IProductionResposity productionDB
@inject IUserInfoResposity userDB
@inject NavigationManager navigationManager
@inject IJSRuntime JS

 <FluentStack Orientation="Orientation.Vertical" Width="100%">
    <FluentStack VerticalAlignment="VerticalAlignment.Center" Width="100%" HorizontalAlignment="HorizontalAlignment.Start">

        <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.TableArrowUp())" OnClick="@ExportAsync">Export</FluentButton>
    </FluentStack>
<FluentDataGrid Items="@items"
                    Style="font-size:10pt;"
                TGridItem="ProductionTask"
                ResizableColumns=true
                ShowHover="true"
                    RowSize="DataGridRowSize.Medium"
                HeaderCellAsButtonWithMenu="true">
        <TemplateColumn Title="" Width="50px">
            @if (context.ProdStatus == 0)
            {
                <FluentIcon Value="@(new Icons.Regular.Size20.AccessibilityCheckmark())" />
            }
            @if (context.ProdStatus == 1)
            {
                <FluentProgressRing Width="16px"></FluentProgressRing>
            }
            @if (context.ProdStatus == 2)
            {
                <FluentIcon Value="@(new Icons.Regular.Size20.Checkmark())" />
            }
            @if (context.ProdStatus == 3)
            {
                <FluentIcon Value="@(new Icons.Regular.Size20.CalendarCancel())" />
            }
        </TemplateColumn>
        <TemplateColumn Title="" Align="Align.Center" Width="40px">

            <FluentPersona Name=""
            StatusSize="PresenceBadgeSize.Small"
            StatusTitle=""
            Image="@context.GetPhotoUrl"
            ImageSize="32px"></FluentPersona>

        </TemplateColumn>
        <PropertyColumn Width="100px" Title="Empl ID" Property="@(p => p.EmplID)"  Sortable="true" />
        <PropertyColumn Width="220px" Title="FullName" Property="@(p => p.FullName)" Sortable="true" />
        <PropertyColumn Width="150px" Title="Case No" Property="@(p => p.CaseNo)" Sortable="true" />
        <PropertyColumn Width="120px" Title="Job Time" Property="@(p => p.CreatedDateTime)" Format="MM/dd HH:mm" Sortable="true" />
        <PropertyColumn Width="180px" Property="@(p => p.Notes)" Sortable="true" />
        <PropertyColumn Width="80px" Title="Job Type" Property="@(p => p.JobTypeName)" Sortable="true" />


        <TemplateColumn Align="@Align.End">
            <FluentButton IconStart="@(new Icons.Regular.Size16.Eye())" OnClick="@(() => ShowDetail(context))" />
        </TemplateColumn>

    </FluentDataGrid>

</FluentStack>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    UserInfo? CurrentUser { get; set; } = new();


    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    IQueryable<ProductionTask>? items;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var username = authState.User.Identity.Name;

        CurrentUser = await userDB.GetUser(username);
        items = (await productionDB.GetProductTasks(0,"",CurrentUser.EmplRefID,"","")).AsQueryable();
    }

    private async Task ShowDetail(ProductionTask task)
    {
        await Task.Delay(500);
        navigationManager.NavigateTo("/workorder?taskid=" + task.TaskID);
    }
    private async Task ExportAsync()
    {
        List<ProductionTask> exportitems = items!.ToList();
        using var workbook = new XLWorkbook();
        var worksheet = workbook.Worksheets.Add("Data");
        
        // Add headers
        worksheet.Cell(1, 1).Value = "User ID";
        worksheet.Cell(1, 2).Value = "User Name";
        // Add more headers as needed

        // Add data
        for (int i = 0; i < exportitems.Count; i++)
        {
            
            worksheet.Cell(i + 2, 1).Value = exportitems[i].CaseNo;
            worksheet.Cell(i + 2, 2).Value = exportitems[i].FullName;
            // Add more properties as needed
        }

        using var stream = new MemoryStream();
        workbook.SaveAs(stream);
        stream.Seek(0, SeekOrigin.Begin);

        var content = new byte[stream.Length];
        await stream.ReadAsync(content, 0, (int)stream.Length);

        await JS.InvokeVoidAsync("saveAsFile", "Data.xlsx", Convert.ToBase64String(content));
    }

    private async Task CancelAsync()
    {
        
    }

}