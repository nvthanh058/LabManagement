@using LabManagement.Components.Pages.Controls
@using LabManagement.Models.ProductionModels
@using LabManagement.Models.SaleModels
@rendermode InteractiveServer

@inject IProductionResposity productionDB
@inject IWebHostEnvironment _webHost;
@inject IDialogService DialogService;
@inject ISalesOrderResposity db

<FluentStack Orientation="Orientation.Vertical" Style="margin-left:5px;padding:10;width:99%">
    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Start">
        <FluentLabel Style="width:100px">ConcernIssue</FluentLabel>
        <FluentTextArea Style="width:90%" @bind-Value="@Content.ConcernIssue" @onchange="@(e=> SaveCommunicate(e,"ConcernIssue"))" Cols="60" Rows="4" />
    </FluentStack>
    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Start">
        <FluentLabel Style="width:100px">Technician Suggestion</FluentLabel>
        <FluentTextArea Style="width:90%" @bind-Value="@Content.TechnicianSuggestion" Rows="4" Cols="60" @onchange="@(e=> SaveCommunicate(e,"TechnicianSuggestion"))" />
    </FluentStack>

   @*  <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Start">
        <FluentLabel Style="width:100px">Response</FluentLabel>
        <FluentTextArea Style="width:90%" @bind-Value="@Content.Response" Cols="60" Rows="4" @onchange="@(e=> SaveCommunicate(e,"Response"))" />
    </FluentStack>
    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Start">
        <FluentLabel Style="width:100px">Date</FluentLabel>
        <FluentDatePicker Style="width:140px" @bind-Value="@Content.ResponseDate" @onchange="@((e)=> SaveCommunicate(e,"ResponseDate"))" />
    </FluentStack> *@

    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Start">
       @*  <FluentLabel Style="width:100px">Lab Status</FluentLabel>

        <FluentSelect TOption="CaseStatus"
                      Placeholder="--Status--"
                      Items="@labStatus"
                      Width="140px"
                      Height="200px"
                      OptionValue="@(i => i.StatusID)"
                      OptionText="@(i => i.StatusName)"
                      @bind-Value="@Content.LabStatus" @onchange="@(e=> SaveCommunicate(e,"LabStatus"))">
        </FluentSelect> *@

        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Start">
            <FluentLabel Style="width:100px">Factory Status</FluentLabel>

            <FluentSelect TOption="CaseStatus"
                          Placeholder="--TT Status--"
                          Items="@TTStatus"
                          Width="140px"
                          Height="200px"
                          OptionValue="@(i => i.StatusID)"
                          OptionText="@(i => i.StatusName)"
                          @bind-Value="@Content.FactoryStatus" @onchange="@(e=> SaveCommunicate(e,"FactoryStatus"))">

            </FluentSelect>
        </FluentStack>


    </FluentStack>
    <FluentAccordion Style="width:100%" ExpandMode="AccordionExpandMode.Single">      
            <FluentAccordionItem  Style="background-color:#EEE" Expanded="true">
                <HeadingTemplate>
                    <FluentLabel Typo="Typography.H4">Cases Response</FluentLabel>
                </HeadingTemplate>

                <ChildContent>

                @if (responses != null)
                {
                    <div style="display: table; table-layout: fixed; width: 100%;">
                        <div style="overflow-x: auto;">

                            <FluentDataGrid Style="min-width: max-content;font-size:10pt;" RowSize="DataGridRowSize.Medium" Items="@responses"
                                            TGridItem="CaseResponse"                                            
                                            ShowHover="true"
                                            MultiLine="true">

                                  <TemplateColumn Align="@Align.Start" Width="70px">

                   
                                        <FluentButton Disabled="@(@context.UserID==CurrentUser.UserID?false:true)" IconStart="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeleteResponse(context))" />

                                 </TemplateColumn>

                                <PropertyColumn Title="Response" Width="200px" Property="@(p => p.Response)" Sortable="true" />
                                <PropertyColumn Title="Time" Property="@(p => p.ResponseDate)" Format="@db.DateFormat" Sortable="true" />
                                <PropertyColumn Title="Status" Property="@(p => p.LabStatus)" Sortable="true" />
                                <PropertyColumn Title="UserID" Property="@(p => p.UserID)" Sortable="true" />

                            </FluentDataGrid>
                        </div>
                    </div>
                }
              
                </ChildContent>
            </FluentAccordionItem>
       
    </FluentAccordion>
    
       <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Start">
        <FluentLabel Style="width:100px">Response</FluentLabel>
        <FluentTextArea Style="width:90%" @bind-Value="@Response" Cols="60" Rows="4" />          
        <FluentSelect TOption="CaseStatus"
                      Placeholder="--Status--"
                      Items="@labStatus"
                      Width="140px"
                      Height="200px"
                      OptionValue="@(i => i.StatusID)"
                      OptionText="@(i => i.StatusName)"
                      @bind-Value="@ResponseStatus">

        </FluentSelect>

        <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.Send())" OnClick="@SaveResponse"></FluentButton>

    </FluentStack>

</FluentStack>

@code {
    private string Response = "";
    private string ResponseStatus = "";

    private string ErrorMessage = "";

    IQueryable<CaseStatus>? labStatus;
    IQueryable<CaseStatus>? TTStatus;

    IQueryable<CaseResponse>? responses;

    [Parameter]
    public bool ShowUpload { get; set; } = true;    
    int ProgressPercent = 0;


    [Parameter]
    public CaseCommunicate Content { get; set; } = new();

    [Parameter]
    public UserInfo CurrentUser { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(200);
        labStatus = (await productionDB.GetCaseStatus(1)).AsQueryable();
        TTStatus = (await productionDB.GetCaseStatus(1)).AsQueryable();
        await LoadResponse(Content.TransID);

    }

    public async Task LoadResponse(string TransID)
    {       
        responses = (await productionDB.GetCaseResponses(TransID)).AsQueryable();
        StateHasChanged();

    }


    private async Task SaveCommunicate(ChangeEventArgs e, string FieldName)
    {
        await Task.Delay(500);

        Content.UserID = CurrentUser.UserID;

        if (FieldName == "ConcernIssue")
            Content.ConcernIssue = e.Value.ToString();
        if (FieldName == "TechnicianSuggestion")
            Content.TechnicianSuggestion = e.Value.ToString();
        if (FieldName == "Response")
            Content.Response = e.Value.ToString();
        if (FieldName == "ResponseDate")
            Content.ResponseDate = DateTime.Parse(e.Value.ToString());

        if (FieldName == "LabStatus")
            Content.LabStatus = e.Value.ToString();
        if (FieldName == "FactoryStatus")
            Content.FactoryStatus = e.Value.ToString();


        var res = await productionDB.SaveCaseCommunicate(Content);

        if (Content.RecID == 0)
        {
            if (res != null)
            {
                Content = res;
            }
        }
    }

    private async Task SaveResponse()
    {
        var res = new CaseResponse();
        res.TransRefID = Content.TransID;
        res.Response = Response;
        res.ResponseDate = DateTime.Now;
        res.UserID = CurrentUser.UserID;
        res.LabStatus = ResponseStatus;
        await productionDB.SaveCaseResponse(res);

        responses = (await productionDB.GetCaseResponses(Content.TransID)).AsQueryable();
        await LoadResponse(Content.TransID);

        Response = "";
        ResponseStatus = "";
    }

    private async Task DeleteResponse(CaseResponse response)
    {
        var dialog = await DialogService.ShowConfirmationAsync("Do you sure to delete?");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
           
            var res = await productionDB.DeleteResponse(response,CurrentUser.UserID);          
            await LoadResponse(Content.TransID);
        }
    }

}
