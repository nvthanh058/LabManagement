@page "/salesorder"
@attribute [Authorize]

@using ClosedXML.Excel
@using LabManagement.Components.Pages.AccountReceivable.Panels
@using LabManagement.Components.Pages.Categories
@using LabManagement.Components.Pages.CommonForms.Panels
@using LabManagement.Components.Pages.Controls
@using Microsoft.FluentUI.AspNetCore.Components.DesignTokens

@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

@inject IDialogService DialogService
@inject ISalesOrderResposity db
@inject ICustomerResposity customerdb
@inject IProductResposity productdb
@inject IUserInfoResposity userdb
@inject ISystemResposity systemDB
@inject IToastService ToastService
@inject IKeyCodeService KeyCodeService
@inject NavigationManager navigationManager
@inject ClipboardService ClipboardService
@inject TypeRampBaseFontSize FontSize

@if (ShowList == true)
{
    <FluentSplitter Style="height:100%" Orientation="Orientation.Horizontal" BarSize="6" Panel1Size="80%" Panel2Size="auto">
        <Panel1>
            
                <FluentStack  Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Start" VerticalAlignment="VerticalAlignment.Center">

                    <FluentAutocomplete TOption="LabInfo"
                    AutoComplete="off"
                    Width="150px"                    
                    OnOptionsSearch="OnSearch"
                    Placeholder="Select Lab"                   
                    MaximumOptionsSearch="int.MaxValue"
                    MaximumSelectedOptions="1"
                    Virtualize="true"
                    OptionStyle="font-size:10pt"
                    OptionText="@(item => $"{item.LabName}")"
                    @bind-SelectedOptions="@SelectedLabs" />

                    <MyLabel Width="80">From Date</MyLabel>
                    <MyDatePicker Width="120" @bind-Value="@orderView!.fromDate"></MyDatePicker>

                    <MyLabel Width="80">To Date</MyLabel>
                    <MyDatePicker Width="120" @bind-Value="@orderView!.toDate"></MyDatePicker>

                    <FluentSearch @bind-Value=Search Style="width:200px;font-size:10pt" @bind-Value:after=LoadData></FluentSearch>
                    <MyButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.Search())" OnClick="@LoadData">Load</MyButton>

                </FluentStack>


                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" Width="100%">

                    <MyButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.AddSquare())" OnClick="@AddAsync">New</MyButton>               
                    <MyButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.SendCopy())" OnClick="@CreateProduct">Create Work Order</MyButton>

                    <FluentMenuButton Text="More" Style="width:100px;font-size:10pt" IconStart="new Icons.Regular.Size16.List()">
                        <FluentMenuItem OnClick="ExportData">
                            <FluentIcon Value="@(new Icons.Regular.Size20.ArrowExportUp())" />
                            Export Data
                        </FluentMenuItem>

                        <FluentMenuItem OnClick="PrintRXOrder">
                            <FluentIcon Value="@(new Icons.Regular.Size20.Print())" />
                            Print RX
                        </FluentMenuItem>

                        <FluentMenuItem OnClick="PrintBarcode">
                            <FluentIcon Value="@(new Icons.Regular.Size20.Print())" />
                            Barcode
                        </FluentMenuItem>

                        <FluentMenuItem OnClick="DeleteAll">
                            <FluentIcon Value="@(new Icons.Regular.Size20.Delete())" />
                            Delete All Selected
                        </FluentMenuItem>

                    </FluentMenuButton>
                    
                    <FluentPaginator State="@pagination" />

                                        <FluentCheckbox @bind-Value="IsAllowPaste" Style="font-size:10pt">Paste Data</FluentCheckbox>
                </FluentStack>

                @if (orderView!.items == null)
                {
                    <div style="width:200px;height:200px;margin-top:100px;margin-left:100px;">
                        <FluentProgressRing></FluentProgressRing>
                    </div>

                }
                else
                {

                     <div style="display: table; table-layout: fixed; width: 100%;">
                    <div style="overflow-x: auto;">

                    <FluentStack Orientation="Orientation.Vertical" Width="95%">

                        <FluentDataGrid Style="min-width: max-content;font-size:10pt;" RowSize="DataGridRowSize.Medium" Items="@orderView!.items"                        
                        TGridItem="SalesTable"                                    
                        ResizableColumns=true
                        RowClass="@rowClass"                   
                        RowStyle="@rowStyle"
                        AutoFit=true                                
                        ShowHover="true"            
                        HeaderCellAsButtonWithMenu="true"
                        Pagination="@pagination">

                            <SelectColumn TGridItem="SalesTable"
                            SelectMode="@Mode"
                            SelectFromEntireRow="true"
                            Property="@(e => e.Selected)"
                            SelectAll="@(orderView!.items.All(e => e.Selected))"
                            SelectAllChanged="@(all => orderView!.items.ToList().ForEach(p => p.Selected = (all == true)))"
                            OnSelect="@((e) =>OnSelectOrder(e.Item,e.Selected))">
                            </SelectColumn>

                            <TemplateColumn Title="" Align="@Align.End" Width="120px">
                                <FluentButton IconStart="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => EditOrderAsync(context))" />
                                <FluentButton IconStart="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeleteOrderAsync(context))" />

                            </TemplateColumn>


                            <PropertyColumn Title="Case No" Property="@(p => p.CaseNo)" Sortable="true" />
                            <PropertyColumn Title="PatientName" Property="@(p => p.PatientName)" Sortable="true" />                            
                            <PropertyColumn Title="PanNo" Property="@(p => p.LabpanNum)" Sortable="true"  />
                            <PropertyColumn Title="Date In" Property="@(p => p.CaseDate)" Format="@db.DateFormat" Sortable="true" />
                            <PropertyColumn Title="Ship Date" Property="@(p => p.ShipDate)" Format="@db.DateFormat" Sortable="true" />
                            <PropertyColumn Title="Cust Req ShipDAte" Property="@(p => p.CustReqShipDate)" Format="@db.DateFormat" Sortable="true" />
                            <PropertyColumn Title="Customer" Property="@(p => p.SalesName)" Sortable="true"  />
                            <PropertyColumn Title="Doctor Name" Property="@(p => p.DoctorName)" Align="Align.End" Sortable="true" />
                            <PropertyColumn Title="Assignment" Property="@(p => p.Assignment)" Align="Align.End" Sortable="true" />
                            <PropertyColumn Title="Sales Status" Property="@(p => p.SalesStatusName)" Align="Align.End" Sortable="true"  />



                        </FluentDataGrid>


                    </FluentStack>

                     </div>
                    </div>
                }
           
        </Panel1>
        <Panel2>

            @* <FluentDataGrid RowSize="DataGridRowSize.Medium" Items="@orderView!.lineitems"
            TGridItem="SalesLine"
            AutoFit=true
            ResizableColumns=true>

                <TemplateColumn Align="@Align.End" Width="120px">

                    <FluentButton IconStart="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => EditLineItem(context))" />
                    <FluentButton IconStart="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeleteLineItem(context))" />

                </TemplateColumn>
                <PropertyColumn Title="Item Code" Property="@(p => p.ItemCode)" />
                <PropertyColumn Title="Name" Property="@(p => p.ItemName)"  />
                <PropertyColumn Title="Case No" Property="@(p => p.CaseNo)" />
                <PropertyColumn Title="Us Teeth" Property="@(p => p.UsTeeth)" />
                <PropertyColumn Title="EurTeeth" Property="@(p => p.EurTeeth)" Sortable="true" />
                <PropertyColumn Title="Shade" Property="@(p => p.Shade)" Sortable="true"  />
                <PropertyColumn Title="SalesQty" Property="@(p => p.SalesQty)" Sortable="true"  />
                <PropertyColumn Title="SalesPrice" Property="@(p => p.SalesPrice)" Sortable="true" />
                <PropertyColumn Title="LineAmount" Property="@(p => p.SalesPrice)" Sortable="true" />


            </FluentDataGrid> *@

            @if (orderView!.lineitems != null)
            {
                <FluentAccordion Style="width:99%" OnAccordionItemChange="HandleOnAccordionItemChange" ExpandMode="AccordionExpandMode.Multi">
                @foreach(var item in orderView!.lineitems!)
                {
                     <FluentAccordionItem Id="@item.RecID.ToString()" Style="background-color:#EEE" Expanded="true">
                        <HeadingTemplate>
                               <FluentLabel  Typo="Typography.H4">@item.ItemName</FluentLabel>
                        </HeadingTemplate>
                    
                        <ChildContent>
                            <FluentStack Orientation="Orientation.Vertical">
                                 <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Start">
                                    <FluentLabel Style="width:100px">Us Teeth</FluentLabel>
                                    <FluentTextField Style="width:180px" @bind-Value="@item.UsTeeth" />
                                </FluentStack> 

                                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Start">
                                    <FluentLabel Style="width:100px">Shade</FluentLabel>
                                    <FluentTextField Style="width:180px" @bind-Value="@item.Shade" />
                                </FluentStack>

                                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Start">
                                    <FluentLabel Style="width:100px">Qty</FluentLabel>
                                    <FluentNumberField ReadOnly="true" Style="width:180px" @bind-Value="@item.SalesQty"/>
                                </FluentStack>

                            </FluentStack>
                                
                        </ChildContent>
                    </FluentAccordionItem>
                }
                </FluentAccordion>
            }
           

        </Panel2>
    </FluentSplitter>

}
else
{

    <SalesOrderInputPanel Content="@Content" OnBackToList="@(e =>CancelAsync(true))" OnNewOrder="@(e =>OnNewOrderCallBack(true))"></SalesOrderInputPanel>

}

<div id="componentId" style="display:none">
    @foreach (var item in orderView!.SelectedItems)
    {        
        <SalesPrintViewPanel Content="@item"></SalesPrintViewPanel>
        <p class="breakhere"></p>
    }
</div>

<div id="barcodeId" style="display:none">
    @if (orderView.SelectedItems != null)
    {
        @foreach (var item in orderView.SelectedItems)
        {
            <BarcodeDesign Content="@item.CaseNo"></BarcodeDesign>
            <p class="breakhere"></p>
        }
    }

</div>
@code {

    private bool activePage = false;
    private FluentMenuButton menubuttonm = new();

    IQueryable<LabInfo>? labs;
    IEnumerable<LabInfo> SelectedLabs = Array.Empty<LabInfo>();
    private void OnSearch(OptionsSearchEventArgs<LabInfo> e)
    {
        e.Items = labs.Where(culture =>
            culture.LabName.Contains(e.Text, StringComparison.OrdinalIgnoreCase));
    }

    bool ShowList = true;
    bool openActionMenu = false;
    DataGridSelectMode Mode = DataGridSelectMode.Multiple;

    Func<SalesTable, string?> rowClass = x => x.Selected == true ? "highlighted" : null;
    Func<SalesTable, string?> rowStyle = x => x.FocusedRow == true ? "background-color: #a1d8f5" : null;
    SalesOrderView? orderView = new();

    [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; }

    UserInfo? CurrentUser { get; set; } = new();

    string Search = "";   

    [Parameter]
    public SalesTable Content { get; set; } = default!;

    Customer SelectedCustomer { get; set; } = new Customer();
    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };

    protected override async Task OnInitializedAsync()
    {
        FontSize.WithDefault("10pt");

        KeyCodeService.RegisterListener(OnKeyHandleAsync);
        IsAllowPaste = false;

        var authState = await authStateTask;
        var UserID = authState.User.Identity.Name;

        CurrentUser = await userdb.GetUser(UserID);

        labs = (await systemDB.GetAllLabs(0, "", "")).AsQueryable();

        await LoadData();

        activePage = true;
    }

    // private void OnRowFocus(FluentDataGridRow<SalesTable> row)
    // {
    //     var activeP = (SalesTable)row.Item;
    //     foreach (var p in orderView.items)
    //         p.FocusedRow = ReferenceEquals(p, activeP);
    // }

    private async Task LoadData()
    {
        var LabID = "";
        if(SelectedLabs.FirstOrDefault() !=null)
        {
            LabID = SelectedLabs.FirstOrDefault().DATAAREAID;
        }
        orderView.items = (await db.GetOrders(0, "", "", Search, orderView.fromDate, orderView.toDate,LabID)).AsQueryable();
    }

    private async void LoadLineItems()
    {        
        if (orderView!.FirstOrder == null)
        {
            ToastService.ShowWarning("Please select an Order");
            return;
        }

        orderView.lineitems = (await db.GetOrderLines(orderView!.FirstOrder.SalesID)).AsQueryable();
    }


    private async Task CancelAsync(bool b)
    {        
        ShowList = true;
        await LoadData();
        await Task.Yield();
        StateHasChanged();
    }

    private async Task OnNewOrderCallBack(bool b)
    {
        ShowList = true;
        await LoadData();                
        await Task.Yield();
        StateHasChanged();

        Task.Delay(1000);
        await AddAsync();
        await Task.Yield();
        StateHasChanged();
    }


    private async Task AddAsync()
    {
        var LabID = "";
        if(SelectedLabs.FirstOrDefault()==null)
        {
            ToastService.ShowWarning("Please select a Lab");
            return;            
        }

        LabID = SelectedLabs.FirstOrDefault().DATAAREAID;

        Content = new SalesTable();
        Content.LabpanNum = (await db.GetSequenceNum("LabNum")).SeqNumber;
        Content.UserID = CurrentUser.EmplRefID;
        Content.ShowImages = true;
        Content.ShowFiles = true;
        Content.DATAAREAID = LabID;

        ShowList = false;
    }

    private async Task ShowProductionAsync()
    {
        await Task.Delay(500);   

        if (orderView!.FirstOrder == null)
        {
            ToastService.ShowWarning("Please select an Order");
            return;
        }

        navigationManager.NavigateTo("/ProductOrder");

        ShowList = false;

        openActionMenu = false;

    }

    private async Task ViewOrderAsync()
    {
        await Task.Delay(500);

        if (orderView!.FirstOrder == null)
        {
            ToastService.ShowWarning("Please select an Order");
            return;
        }

        Content = orderView!.FirstOrder;
        Content.UserID = CurrentUser.EmplRefID;
        Content.ShowImages = true;
        Content.ShowFiles = true;
        Content.ReadOnly = true;
        ShowList = false;

        openActionMenu = false;

    }

    private async Task EditOrderAsync(SalesTable item)
    {

        Content = item;
        Content.UserID = CurrentUser.EmplRefID;
        Content.ShowImages = true;
        Content.ShowFiles = true;

        ShowList = false;

        openActionMenu = false;

    }

    private async Task DeleteOrderAsync(SalesTable item)
    {

        var dialog = await DialogService.ShowConfirmationAsync("Do you sure to delete selected orders?");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var res = await db.DeleteOrder(item.RecID);


            await LoadData();
        }

    }

    private async Task DeleteAll()
    {

        var dialog = await DialogService.ShowConfirmationAsync("Do you sure to delete selected orders?");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {

            foreach(var item in orderView.SelectedItems)
            {
                var res = await db.DeleteOrder(item.RecID);
            }

            await LoadData();
        }

    }

    private async Task DeleteMultiOrderAsync()
    {       
        if (orderView.SelectedItems == null)
        {
            ToastService.ShowWarning("Please select Orders");
            return;
        }

        var dialog = await DialogService.ShowConfirmationAsync("Do you sure to delete selected orders?");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            foreach (var delItem in orderView.SelectedItems)
            {
                var item = delItem;
                var res = await db.DeleteOrder(item.RecID);
            }

            await LoadData();
        }

    }

    private async Task ClearSelectAsync()
    {
        await Task.Delay(500);     
        await LoadData();
    }

    private async Task EditLineItem(SalesLine item)
    {       
        var parameters = new DialogParameters
            {
                Title = "Order Detail",
                PrimaryAction = "Yes",
                PrimaryActionEnabled = true,
                Width = "800px",
                Height = "600px",
                Modal = false,
            };

        var dialog = await DialogService.ShowDialogAsync<InputSaleLinesPanel>(item, parameters);
        var dialogResult = await dialog.Result;
        await UpdateLineItem(dialogResult);
    }

    private async Task UpdateLineItem(DialogResult result)
    {        
        await Task.Delay(500);
        if (result.Cancelled)
        {
            return;
        }        

        if (result.Data is not null)
        {
            var itemRes = result.Data as SalesLine;
            await db.SaveOrderLine(itemRes);
        }
    }



    private async Task DeleteLineItem(SalesLine item)
    {
        var dialog = await DialogService.ShowConfirmationAsync("Do you sure to delete this item?");
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var res = await db.DeleteOrderLine(item.RecID);

            if (res > 0)
            {
                LoadLineItems();
            }
        }
    }
    private async Task OnSelectOrder(SalesTable item, bool Selected)
    {       
        if (item != null)
        {
            item.Selected = Selected;
            orderView.lineitems = (await db.GetOrderLines(item.SalesID)).AsQueryable();


            foreach(var order in orderView.items)
            {
                order.FocusedRow = false;
            }
            item.FocusedRow = true;
        }

    }

    [Inject]
    private ControlCornerRadius ControlCornerRadius { get; set; } = default!;
    //private FluentButton? ref1;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            // await ControlCornerRadius.SetValueFor(ref1!.Element, 0);            
            // StateHasChanged();
        }
    }

    public async Task PrintRXOrder()
    {

        if (orderView.SelectedItems == null)
        {
            ToastService.ShowWarning("Please select Orders");
            return;
        }

        await JSRuntime.InvokeVoidAsync("printComponent", "#componentId");

    }


    IQueryable<SalesLine>? lineitems;
    private async Task CreateProduct()
    {
        if (orderView.SelectedItems == null)
        {
            ToastService.ShowWarning("Please select Orders");
            return;
        }

        var dialog = await DialogService.ShowConfirmationAsync("Do you sure to create work order?");
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var iCount = 0;
            foreach(var sOrder in orderView.SelectedItems)
            {

                lineitems = (await db.GetOrderLines(sOrder.SalesID)).AsQueryable();
                if (lineitems.FirstOrDefault() != null)
                {
                    foreach (SalesLine item in lineitems)
                    {
                        item.UserID = CurrentUser!.UserID;
                        item.WorkNotes = sOrder.TranslateNotes;
                        item.CustomerRequests = sOrder.WorkTicketNotes;

                        var res = await db.SaveProdOrder(item);
                        iCount += res.RecID;
                    }
                }
                else
                {
                    ToastService.ShowWarning("No product in Case#" + sOrder.CaseNo);  
                }

            }

            if (iCount > 0)
            {
                navigationManager.NavigateTo("/ProductOrder");
            }
            else
            {
                dialog = await DialogService.ShowInfoAsync("This order have been in Production");
                result = await dialog.Result;
            }

        }
    }
    private async Task GotoPage(string url)
    {       
        navigationManager.NavigateTo(url);
        StateHasChanged();
    }


    public async Task ExportData()
    {
        var exportItems = orderView.items!.ToList();

        using var workbook = new XLWorkbook();
        var worksheet = workbook.Worksheets.Add("Data");

        worksheet.Cell(1, 1).Value = "No";
        worksheet.Cell(1, 2).Value = "CaseNo No";
        worksheet.Cell(1, 3).Value = "Lab Num";
        worksheet.Cell(1, 4).Value = "Patient Name";
        worksheet.Cell(1, 5).Value = "Doctor Name";
        worksheet.Cell(1, 6).Value = "Date In";
        worksheet.Cell(1, 7).Value = "Ship Date";
        worksheet.Cell(1, 8).Value = "Customer Name";
        worksheet.Cell(1, 9).Value = "Cust Requests";
        worksheet.Cell(1, 10).Value = "Work notes";

        worksheet.Range("A1:Z1").Style.Font.Bold = true;
        var startRow = 2;
        foreach (var item in exportItems)
        {
            worksheet.Cell(startRow, 1).Value = startRow - 1;
            worksheet.Cell(startRow, 2).Value = item.CaseNo;
            worksheet.Cell(startRow, 3).Value = item.LabpanNum;
            worksheet.Cell(startRow, 4).Value = item.PatientName;
            worksheet.Cell(startRow, 5).Value = item.DoctorName;
            worksheet.Cell(startRow, 6).Value = item.CaseDate;
            worksheet.Cell(startRow, 7).Value = item.ShipDate;
            worksheet.Cell(startRow, 8).Value = item.CustomerName;     
            worksheet.Cell(startRow, 9).Value = item.WorkTicketNotes;
            worksheet.Cell(startRow, 10).Value = item.TranslateNotes;

            startRow += 1;
            // Add more properties as needed
        }

        worksheet.Columns().AdjustToContents();

        using var stream = new MemoryStream();
        workbook.SaveAs(stream);
        stream.Seek(0, SeekOrigin.Begin);

        var content = new byte[stream.Length];
        await stream.ReadAsync(content, 0, (int)stream.Length);

        var fileDate = DateTime.Now.ToString("yyMMddHHmmssttt");

        await JSRuntime.InvokeVoidAsync("saveAsFile", "SaleOrders" + fileDate + ".xlsx", Convert.ToBase64String(content));
    }

    private bool IsAllowPaste = false;
    private bool IncludeKeyUp = false;
    private bool StopRepeat = true;
    private List<(string Key, string Event)> KeyPressed = new();

    private async Task OnKeyHandleAsync(FluentKeyCodeEventArgs args)
    {
        if (activePage == true)
        {
             if (IsAllowPaste == false)
        {
            return;
        }

        if (StopRepeat && args.Repeat)
        {

        }
        else
        {
            KeyPressed.Add((args.ToString(), args.Name));

            var keyStr = "";
            @foreach (var key in KeyPressed)
            {
                keyStr = key.Key;
                if (keyStr == "Ctrl + V")
                {
                    var a = key.Key;

                    string s = await ClipboardService.ReadTextAsync();
                    await ProcessImportData(s);
                    await LoadData();
                }

            }

            StateHasChanged();
        }

        }
       

    }

    public async Task ProcessImportData(string s)
    {
        string[] lines = s.Split('\n');

        List<SalesTable> data = new List<SalesTable>();
        var CountInsert = 0;
        foreach (string line in lines)
        {

            string[] sCells = line.Split('\t');

            if (sCells.Length > 5)
            {
                var item = new SalesTable();
                item.RecID = 0;
                item.CaseDate = DateTime.Parse(sCells[0].Trim());
                item.CaseNo = sCells[1].Trim();
                item.LabpanNum = sCells[2].Trim();

                try
                {
                    var shipDate = DateTime.Parse(sCells[3].Trim());

                    item.ShipDate = shipDate;
                    item.CustReqShipDate = shipDate;

                }
                catch
                {
                    item.ShipDate = item.CaseDate?.AddDays(3);
                    item.CustReqShipDate = item.CaseDate?.AddDays(3);

                }


                item.PatientName = sCells[4].Trim();

                var LabName = sCells[5].Trim();

                var labList = (await systemDB.GetAllLabs(0, "", LabName)).AsQueryable();
                if (labList.FirstOrDefault() != null)
                    item.DATAAREAID = labList.FirstOrDefault()!.DATAAREAID;

                item.DoctorName = sCells[6].Trim();
                item.WorkTicketNotes = sCells[12].Trim();
                item.TranslateNotes = sCells[13].Trim();

                if (sCells[14] != null)
                {
                    item.Assignment = sCells[14].Trim();
                }

                item.UserID = CurrentUser.EmplRefID;

                var itemName = sCells[9].Trim();

                var res = await db.SaveOrder(item);

                if (res.RecID > 0)
                {
                    CountInsert += 1;
                    var prod = (await productdb.GetAll(0, "", itemName.ToUpper())).AsQueryable().FirstOrDefault()!;
                    if (itemName.IndexOf(",") > 0)
                    {
                        prod = (await productdb.GetAll(0, "", "COMBO")).AsQueryable().FirstOrDefault()!;
                    } 

                    if (prod != null)
                    {
                        var SO = await db.GetOrderByRecID(res.RecID);

                        var SL = new SalesLine();
                        SL.SalesID = SO.SalesID;
                        SL.ItemID = prod.ItemID;
                        SL.ItemCode = prod.ItemCode;
                        SL.ItemName = prod.ItemName;

                        SL.UsTeeth = sCells[7].Trim();

                        var qty = 1;
                        try
                        {
                            qty = Int32.Parse(sCells[8].Trim());
                        }
                        catch
                        {
                            qty = 1;
                        }
                        SL.CaseNo = SO.CaseNo;

                        SL.SalesQty = qty;
                        SL.Shade = sCells[10].Trim();
                        SL.DATAAREAID = SO.DATAAREAID;

                        await db.SaveOrderLine(SL);
                    }
                }
            }
        }

         ToastService.ShowWarning("(" + CountInsert + ") Cases imported");        
    }

    public ValueTask DisposeAsync()
    {
        KeyCodeService.UnregisterListener(OnKeyHandleAsync, OnKeyHandleAsync);
        return ValueTask.CompletedTask;
    }

    public async Task PrintBarcode()
    {

        if (orderView!.SelectedItems == null)
        {
            ToastService.ShowWarning("Please select Orders");
            return;
        }
        await JSRuntime.InvokeVoidAsync("printComponent", "#barcodeId");

    }

    FluentAccordionItem? changed;
    string activeItemId = "";
    private async Task HandleOnAccordionItemChange(FluentAccordionItem item)
    {        
        changed = item;
        activeItemId = changed.Id;
        await Task.Delay(200);    
    }

}
